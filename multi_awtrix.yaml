blueprint:
  name: "Multi awtrix"
  description: "Multi awtrix"
  domain: automation
  input:
    awtrix:
      name: AWTRIX Light
      description: Select the Awtrix light
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX Light
          multiple: true
    message:
      name: Message
      description: Message to send to the devices.
      selector:
        text:

variables:
  message: !input message
  device_ids: !input awtrix
  awtrix_devices: >-
    {%- macro get_awl_entities(device_id) %}
      {%- set awl_device = iif(device_attr(device_id, 'name_by_user') != none, device_attr(device_id, 'name_by_user'), device_attr(device_id, 'name')) %}
      {%- set awl_entity = expand(device_entities(device_id)) | select('search', 'device_topic') | map(attribute='entity_id') | first %}
      {%- set awl_topic = states(awl_entity) -%}
      {{ {'device': awl_device, 'topic': awl_topic, 'entity': awl_entity } }}
    {%- endmacro %}
    {% set ns = namespace(awtrix=[]) %}
    {% for device_id in device_ids %}
      {%- set ns.awtrix = ns.awtrix + [get_awl_entities(device_id)] %}
    {%- endfor %}
    {{ ns.awtrix|replace('"','') }}

trigger:
  - platform: time_pattern
    minutes: /1
condition: []

action:
  - repeat:
      for_each: "{{ awtrix_devices }}"
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ states(repeat.item.entity) not in ['unavailable', 'unknown'] }}
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item.topic }}/multitest"
                    payload: >
                      {
                        "repeat.item": "{{ repeat.item }}",
                        "repeat.item.device": "{{ repeat.item.device }}",
                        "repeat.item.topic": "{{ repeat.item.topic }},
                        "repeat.item.entity": "{{ repeat.item.entity }},
                      }

mode: single
